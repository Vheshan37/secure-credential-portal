generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(45)
  password String @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model req_status {
  id      Int       @id @default(autoincrement())
  status  String    @db.VarChar(45)
  request request[]
}

model request {
  id                 Int        @id @default(autoincrement())
  email              String     @db.VarChar(100)
  name               String     @db.VarChar(50)
  designation        String     @db.VarChar(50)
  contact_no         String     @db.VarChar(12)
  circuit_id         String     @db.VarChar(50)
  company            String     @db.VarChar(50)
  service            String     @db.VarChar(50)
  description        String     @db.Text
  email_verification String     @db.VarChar(10)
  date_time          DateTime   @db.DateTime(0)
  req_status_id      Int
  req_status         req_status @relation(fields: [req_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_req_status")
  response           response[]

  @@index([req_status_id], map: "fk_request_req_status_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model res_status {
  id       Int        @id @default(autoincrement())
  status   String     @db.VarChar(45)
  response response[]
}

model response {
  id            Int            @id @default(autoincrement())
  used_time     DateTime       @db.DateTime(0)
  exp_time      DateTime       @db.DateTime(0)
  username      String         @db.VarChar(50)
  password      String         @db.VarChar(255)
  res_status_id Int
  request_id    Int
  request       request        @relation(fields: [request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_response_request1")
  res_status    res_status     @relation(fields: [res_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_response_res_status1")
  response_otp  response_otp[]

  @@index([request_id], map: "fk_response_request1_idx")
  @@index([res_status_id], map: "fk_response_res_status1_idx")
}

model response_otp {
  id          Int      @id @default(autoincrement())
  otp         String   @db.VarChar(6)
  response_id Int
  response    response @relation(fields: [response_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_response_otp_response1")

  @@index([response_id], map: "fk_response_otp_response1_idx")
}
